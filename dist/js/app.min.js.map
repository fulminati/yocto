{"version":3,"sources":["ajax.js","old.js","run.js","prova1.js","prova2.js","ready.js"],"names":["reqfields","ajax","params","callback","headers","body","method","called","req","getRequest","cors","cb","statusCode","responseText","undefined","status","response","open","url","success","onload","onreadystatechange","readyState","onerror","ontimeout","onabort","setDefault","FormData","i","len","length","field","setRequestHeader","send","XDomainRequest","test","navigator","userAgent","XMLHttpRequest","obj","key","value","$","run","app","location","pathname","substring","document","addEventListener","e","get","DONE","on","event","id","getElementById","list","asa","console","log"],"mappings":"AAGA,IAAAA,UAAA,CACA,eAAA,kBAAA,UAAA,cAqCAC,KAAA,SAAAC,EAAAC,GAIA,IAAAC,EAAAF,EAAAE,SAAA,GACAC,EAAAH,EAAAG,KACAC,EAAAJ,EAAAI,SAAAD,EAAA,OAAA,OACAE,GAAA,EAEAC,EAAAC,WAAAP,EAAAQ,MAEA,SAAAC,EAAAC,EAAAC,GACA,OAAA,WACAN,IACAJ,OAAAW,IAAAN,EAAAO,OAAAH,EAAAJ,EAAAO,OACA,IAAAP,EAAAO,OAAA,QAAAP,EAAAQ,UAAAR,EAAAK,cAAAA,EACAL,GACAD,GAAA,IAKAC,EAAAS,KAAAX,EAAAJ,EAAAgB,KAAA,GAEA,IAAAC,EAAAX,EAAAY,OAAAT,EAAA,KACAH,EAAAa,mBAAA,WACA,IAAAb,EAAAc,YAAAH,KAEAX,EAAAe,QAAAZ,EAAA,KAAA,SACAH,EAAAgB,UAAAb,EAAA,KAAA,WACAH,EAAAiB,QAAAd,EAAA,KAAA,SAEAN,IACAqB,WAAAtB,EAAA,mBAAA,kBAEAuB,UAAAtB,aAAAsB,UACAD,WAAAtB,EAAA,eAAA,sCAIA,IAAA,IAAAwB,EAAA,EAAAC,EAAA7B,UAAA8B,OAAAF,EAAAC,EAAAD,SAEAd,IAAAZ,EADA6B,EAAA/B,UAAA4B,MAEApB,EAAAuB,GAAA7B,EAAA6B,IAGA,IAAA,IAAAA,KAAA3B,EACAI,EAAAwB,iBAAAD,EAAA3B,EAAA2B,IAIA,OAFAvB,EAAAyB,KAAA5B,GAEAG,GAGA,SAAAC,WAAAC,GAMA,OAAAA,GAAAwB,iBAAA,SAAAC,KAAAC,UAAAC,WACA,IAAAH,eACAI,eACA,IAAAA,oBADA,EAIA,SAAAZ,WAAAa,EAAAC,EAAAC,GACAF,EAAAC,GAAAD,EAAAC,IAAAC,EC5GA,IAAAC,EAAA,CAMAC,IAAA,SAAAC,GACA,IAAA1B,EAAA2B,SAAAC,SAAAC,UAAA,GAEAC,SAAAC,iBAAA,mBAAA,SAAAC,GACAN,EAAA1B,GAAA,cAUAiC,IAAA,SAAAjC,EAAAhB,EAAAS,GACA,IAAAH,EAAA,IAAA8B,eACA9B,EAAAS,KAAA,MAAAC,GACAV,EAAAa,mBAAA,WACAb,EAAAc,aAAAgB,eAAAc,MACA,MAAA5C,EAAAO,QAAAJ,EAAAH,EAAAK,eAGAL,EAAAyB,QASAoB,GAAA,SAAAC,EAAAC,EAAA5C,GACAqC,SAAAQ,eAAAD,GAAAN,iBAAAK,EAAA3C,KCrCA,SAAAgC,MAEA1C,KAAA,CAAAiB,IAAA,iBAAA,SAAAuC,EAAAC,GACAC,QAAAC,IAAAH,EAAAC,KCHAC,QAAAC,IAAA,KCAAD,QAAAC,IAAA,KCGAZ,SAAAC,iBAAA,mBAAAN","file":"app.min.js","sourcesContent":["// Best place to find information on XHR features is:\n// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n\nvar reqfields = [\n    'responseType', 'withCredentials', 'timeout', 'onprogress'\n]\n\n// Simple and small ajax function\n// Takes a parameters object and a callback function\n// Parameters:\n//  - url: string, required\n//  - headers: object of `{header_name: header_value, ...}`\n//  - body:\n//      + string (sets content type to 'application/x-www-form-urlencoded' if not set in headers)\n//      + FormData (doesn't set content type so that browser will set as appropriate)\n//  - method: 'GET', 'POST', etc. Defaults to 'GET' or 'POST' based on body\n//  - cors: If your using cross-origin, you will need this true for IE8-9\n//\n// The following parameters are passed onto the xhr object.\n// IMPORTANT NOTE: The caller is responsible for compatibility checking.\n//  - responseType: string, various compatability, see xhr docs for enum options\n//  - withCredentials: boolean, IE10+, CORS only\n//  - timeout: long, ms timeout, IE8+\n//  - onprogress: callback, IE10+\n//\n// Callback function prototype:\n//  - statusCode from request\n//    + Possibly null or 0 (i.e. falsy) if an error occurs\n//  - response\n//    + if responseType set and supported by browser, this is an object of some type (see docs)\n//    + otherwise if request completed, this is the string text of the response\n//    + if request is aborted, this is \"Abort\"\n//    + if request times out, this is \"Timeout\"\n//    + if request errors before completing (probably a CORS issue), this is \"Error\"\n//  - request object\n//\n// Returns the request object. So you can call .abort() or other methods\n//\n// DEPRECATIONS:\n//  - Passing a string instead of the params object has been removed!\n//\nvar ajax = function (params, callback) {\n    // Any variable used more than once is var'd here because\n    // minification will munge the variables whereas it can't munge\n    // the object access.\n    var headers = params.headers || {}\n        , body = params.body\n        , method = params.method || (body ? 'POST' : 'GET')\n        , called = false\n\n    var req = getRequest(params.cors)\n\n    function cb(statusCode, responseText) {\n        return function () {\n            if (!called) {\n                callback(req.status === undefined ? statusCode : req.status,\n                    req.status === 0 ? \"Error\" : (req.response || req.responseText || responseText),\n                    req)\n                called = true\n            }\n        }\n    }\n\n    req.open(method, params.url, true)\n\n    var success = req.onload = cb(200)\n    req.onreadystatechange = function () {\n        if (req.readyState === 4) success()\n    }\n    req.onerror = cb(null, 'Error')\n    req.ontimeout = cb(null, 'Timeout')\n    req.onabort = cb(null, 'Abort')\n\n    if (body) {\n        setDefault(headers, 'X-Requested-With', 'XMLHttpRequest')\n\n        if (!FormData || !(body instanceof FormData)) {\n            setDefault(headers, 'Content-Type', 'application/x-www-form-urlencoded')\n        }\n    }\n\n    for (var i = 0, len = reqfields.length, field; i < len; i++) {\n        field = reqfields[i]\n        if (params[field] !== undefined)\n            req[field] = params[field]\n    }\n\n    for (var field in headers)\n        req.setRequestHeader(field, headers[field])\n\n    req.send(body)\n\n    return req\n}\n\nfunction getRequest(cors) {\n    // XDomainRequest is only way to do CORS in IE 8 and 9\n    // But XDomainRequest isn't standards-compatible\n    // Notably, it doesn't allow cookies to be sent or set by servers\n    // IE 10+ is standards-compatible in its XMLHttpRequest\n    // but IE 10 can still have an XDomainRequest object, so we don't want to use it\n    if (cors && XDomainRequest && !/MSIE 1/.test(navigator.userAgent))\n        return new XDomainRequest\n    if (XMLHttpRequest)\n        return new XMLHttpRequest\n}\n\nfunction setDefault(obj, key, value) {\n    obj[key] = obj[key] || value\n}\n","var $ = {\n\n    /**\n     *\n     * @param app\n     */\n    run: function (app) {\n        var url = location.pathname.substring(1);\n\n        document.addEventListener('DOMContentLoaded', function(e) {\n            app[url||'index']()\n        })\n    },\n\n    /**\n     *\n     * @param url\n     * @param params\n     * @param cb\n     */\n    get: function (url, params, cb) {\n        var req = new XMLHttpRequest();\n        req.open('GET', url);\n        req.onreadystatechange = function () {\n            if (req.readyState === XMLHttpRequest.DONE) {\n                if (req.status === 200) { cb(req.responseText) }\n            }\n        }\n        req.send()\n    },\n\n    /**\n     *\n     * @param event\n     * @param id\n     * @param cb\n     */\n    on: function (event, id, cb) {\n        document.getElementById(id).addEventListener(event, cb);\n    }\n};\n","\nfunction run() {\n\n    ajax({url:'api/list.json'}, function(list, asa) {\n        console.log(list, asa)\n    })\n\n}\n","\nconsole.log(\"A\")\n\n","\nconsole.log(\"B\")\n\n","/**\n *\n *\n */\ndocument.addEventListener('DOMContentLoaded', run);\n"]}